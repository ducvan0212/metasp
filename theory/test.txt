% a(a).b(b).c(c).d(d).e(e).f(f).g(g).
% &diff { 0 - X } <= 0 :- a(X).
% &diff { 0 - X } <= 0 :- b(X).
% &diff { 0 - X } <= 0 :- c(X).
% &diff { 0 - X } <= 0 :- d(X).
% &diff { 0 - X } <= 0 :- e(X).
% &diff { 0 - X } <= 0 :- f(X).
% &diff { 0 - X } <= 0 :- g(X).
% &diff { X - Y } <= 1 :- a(X), b(Y).
% &diff { X - Y } <= 1 :- b(X), c(Y).
% &diff { X - Y } <= 1 :- c(X), d(Y).
% &diff { X - Y } <= 1 :- d(X), b(Y).
% &diff { X - Y } <= 1 :- c(X), e(Y).
% &diff { X - Y } <= 1 :- a(X), f(Y).
% &diff { X - Y } <= 1 :- f(X), g(Y).
% &diff { X - Y } <= 1 :- g(X), a(Y).

% a(a).a(b).a(c).
% &diff { 0 - X } <= 0 :- a(X).
% &diff { a - b } <= 1.
% &diff { b - c } <= 1.
% &diff { c - a } <= -3.

% #const n=1000.
% 
% executionTime(1,1,54).
% executionTime(1,2,34).
% executionTime(1,3,61).
% executionTime(1,4,2).
% executionTime(2,1,9).
% executionTime(2,2,15).
% executionTime(2,3,89).
% executionTime(2,4,70).
% executionTime(3,1,38).
% executionTime(3,2,19).
% executionTime(3,3,28).
% executionTime(3,4,87).
% executionTime(4,1,95).
% executionTime(4,2,34).
% executionTime(4,3,7).
% executionTime(4,4,29).
% assign(1,1,3).
% assign(1,2,1).
% assign(1,3,4).
% assign(1,4,2).
% assign(2,1,4).
% assign(2,2,1).
% assign(2,3,2).
% assign(2,4,3).
% assign(3,1,1).
% assign(3,2,2).
% assign(3,3,3).
% assign(3,4,4).
% assign(4,1,1).
% assign(4,2,3).
% assign(4,3,2).
% assign(4,4,4).
% bound(n).
% 
% task(T):-executionTime(T,_,_).
% machine(M):-executionTime(_,M,_).
% 
% % decide which operation first
% {seq((T,ST1),(T,ST2),Time1)} :- assign(T,ST1,M1), assign(T,ST2,M2), ST1<ST2, executionTime(% T,ST1,Time1), executionTime(T,ST2,Time2).% 
% seq((T,ST2),(T,ST1),Time2) :- assign(T,ST% 1,M1), assign(T,ST2,M2), ST1<ST2, executionTime(% T,ST1,Time1), executionTime(T,ST2,Time2),%  not seq((T,ST1),(T,ST2),Time1).% 
% 
% % decide which task first on machine
% {seq((T1,ST1),(T2,ST2),Time1)} :- assign(T1,ST1,M), assign(T2,ST2,M), T1<T2, executionTime(% T1,ST1,Time1), executionTime(T2,ST2,Time2).% 
% seq((T2,ST2),(T1,ST1),Time2) :- assign(T1,S% T1,M), assign(T2,ST2,M), T1<T2, executionTime(% T1,ST1,Time1), executionTime(T2,ST2,Time2), not seq((T1,ST1),(T2,ST2),Time1).% 
% 
% &diff{T1-T2}<= -Time:-seq(T1,T2,Time).

% &diff{0-(T,M)} <= 0 :- task(T), machine(M), bound(B).
% &diff{(T,M)-0} <= B :- task(T), machine(M), bound(B).

% &show_assignment{}.
% #show.

% &diff{0-a} <= 0.
% &diff{c-a} <= -1.
% &diff{a-0} <= 1.
% &diff{a-c} <= 1.

% a.
% {b;c}:- a.
% :- b, not c.

% as is a,b,c.

% a.
% {b;c}:- a, ok(1).
% {ok(1)}.
% not selected because I does not entail body. :- b, not c.

% a.
% {b;c}:- a, ok(1).
% {ok(1)}.
% :- b, not c, ok(2).
% {ok(2)}.
% :- not b.
% :- not c.
% #minimize {1,X: ok(X)}.

% bound(1).
% &diff{a-0} <= B :- bound(B), ok(1).
% {ok(1)}.
% :- not &diff{a-0} <= 1.

% block(b0).
% block(b1).
% block(b2).
% 
% init(on(b1,table)). 
% init(on(b2,b0)).
% init(on(b0,table)).
% 
% goal(on(b1,b0)).
% goal(on(b2,b1)).
% goal(on(b0,table)).
% 
% time(1..lasttime). location(table). location(X) :- block(X). 
% holds(F,0) :- init(F).
% % Generate
% { move(X,Y,T) : block(X), location(Y), X != Y } = 1 :- time(T).
% #heuristic move(B,L,T) : block(B), location(L), time(T). [lasttime-T+1,true]
% % Test
% :- move(X,Y,T), holds(on(A,X),T-1).
% :- move(X,Y,T), holds(on(B,Y),T-1), B != X, Y != table.
% % Define
% moved(X,T) :- move(X,Y,T).
% holds(on(X,Y),T) :- move(X,Y,T). 
% holds(on(X,Z),T) :- holds(on(X,Z),T-1), not moved(X,T), time(T).
% % Test
% :- goal(F), not holds(F,lasttime).
% % Display 
% #show move/3.

% &diff{a-0} <= 5 :- ok(1). {ok(1)}.
% &diff{a-b} <= 2 :- ok(2). {ok(2)}.
% :- not &diff{b-0} <= 3.
% :- not &diff{0-b} <= -3.
% #minimize {X: ok(X)}.


% planning with durative action
%  planning with actions with duration 
% numerical planning

&diff{a-0}<=3 :- ok(1). 
{ ok(1) }.
&diff{0-a}<= -3 :- ok(2). 
{ ok(2) }.
&diff{a-c}<=1 :- ok(3). 
{ ok(3) }.
&diff{b-0}<=4 :- ok(4). 
{ ok(4) }.
&diff{c-0} <= 2.
&diff{0-c} <= -2.
#minimize{ X: ok(X) }.

%&diff{a-0}<=3. &diff{a-c}<=1. &diff{b-0}<=4. &diff{0-a}<= -3.